using UnityEngine;
using System;
using System.Threading;
using System.Threading.Tasks;
using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Types.Primitive;
using Substrate.Gear.Api.Generated.Storage;
using Substrate.Gear.Api.Generated.Model.sp_core.crypto;
using Substrate.Gear.Api.Generated.Model.frame_system;
using Substrate.Gear.Api.Generated.Model.gprimitives;
using Sails.Remoting.Abstractions.Core;
using Sails.Remoting.Core;
using Sails.Remoting.Abstractions;
using System.Collections.Generic;
using System.Linq;
using Sails.Remoting.Exceptions;
using Substrate.Gear.Api.Generated.Model.gear_core_errors.simple;
using Substrate.Gear.Client.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Base;
using Sails.Remoting.Options;
using Sails.Remoting;
using Substrate.Gear.Api.Generated;
using Substrate.Gear.Api.Generated.Model.sp_runtime;
using Substrate.Gear.Api.Generated.Model.vara_runtime;
using Substrate.Gear.Client.GearApi.Model.gprimitives;
using Substrate.Gear.Client.NetApi.Model.Extrinsics;
using Substrate.Gear.Client.NetApi.Model.Rpc;
using Substrate.NET.Schnorrkel;
using Substrate.NetApi.Model.Rpc;
using Substrate.NetApi.Model.Types;
using GasUnit = Substrate.NetApi.Model.Types.Primitive.U64;
using ValueUnit = Substrate.NetApi.Model.Types.Primitive.U128;





public class RemotingActionExample : MonoBehaviour
{
    private SubstrateClient _client;
    private string _currentUrl;

    private IRemotingProvider _remotingProvider;
    private IRemoting _remotingClient;

    private readonly IRemoting remoting;

    public RemotingActionExample(IRemoting remoting)
    {
        this.remoting = remoting;
    }


    /// <summary>
    /// Initializes the client and connects to the specified URL if not already connected.
    /// </summary>
    public async Task InitializeClientAsync(string url)
    {
        if (_client == null || _currentUrl != url)
        {
            _currentUrl = url;
            _client = new SubstrateClient(new Uri(url), ChargeTransactionPayment.Default());
            await _client.ConnectAsync();
        }

        if (!_client.IsConnected)
        {
            throw new Exception("Client is not connected.");
        }
    }


    /// <summary>
    /// Sends a "ping" message to a specific program.
    /// </summary>
    /// <param name="url">The URL of the node to connect to.</param>
    /// <param name="programId">The program ID to send the ping message to.</param>
    /// <param name="message">The ping message content.</param>
    /// <returns>The response from the program.</returns>
    public async Task<string> SendPingAsync(string url, string programId)
    {
        await InitializeClientAsync(url);

        // Convert the program ID to bytes manually
        var programIdBytes = HexStringToByteArray(programId);

        // Create the ActorId using the byte array
        var actorId = new ActorId
        {
            Value = new Substrate.Gear.Api.Generated.Types.Base.Arr32U8
            {
                Bytes = programIdBytes
            }
        };

        string hexSeed = "0x496f9222372eca011351630ad276c7d44768a593cecea73685299e06acef8c0a";

        // Generar la cuenta a partir de la semilla.
        var aliceAccount = AccountService.GenerateAccount(hexSeed);

        if (aliceAccount == null)
        {
            throw new Exception("No se pudo generar la cuenta.");
        }

        Debug.Log(aliceAccount);


        // Inicializa _remotingProvider con una función válida para remotingFactory.
        //_remotingProvider = new RemotingProvider(aliceAccount);


        var remotingClient = _remotingProvider.CreateRemoting(aliceAccount);

        // Debug.Log(remotingClient);



        // Ruta del programa y de la acción
        var programRoute = "PingPongProgram";
        var actionRoute = "Ping";
        var args = new IType[] { new Str("ping") };

        var pingPongClient = new Sails.DemoClient.Demo.PingPong(remotingClient);


        // Crear la acción remota para el contrato PingPong
        var pingPongAction = new RemotingAction<Str>(remoting, programRoute, actionRoute, args)
            .WithGasLimit(new GasUnit(50000)) // Límite de gas para la operación
            .WithValue(new ValueUnit(0));


        var programId = HexStringToByteArray("0x774d10658bffba7380b606ad8e56fd23951d0ff0f60ee441b59738100a3d99fd");

        var result = await pingPongClient.Ping((Str)"ping").SendReceiveAsync(programId, CancellationToken.None);


        Debug.Log(pingPongAction);


        //var pingPongClient = new Sails.DemoClient.Demo.PingPong(remotingClient);

        //var activationReply = await pingPongClient.ActivateAsync(codeId, salt, CancellationToken.None);
        //var programId = activationReply.Value; // Obtener el ID del programa activado

        // Send the ping message
        //var result = await pingPongClient.Ping((Str)"ping").SendReceiveAsync(programId, CancellationToken.None);

        //var messageReply = await pingPongClient.MessageAsync(programId, CancellationToken.None);
        //var result = messageReply.Value; // Obtener el resultado del mensaje

        //Debug.Log(result);


        //return result.ToString();
    }

    private static byte[] HexStringToByteArray(string hex)
    {
        if (string.IsNullOrEmpty(hex))
        {
            throw new ArgumentException("Hex string cannot be null or empty.");
        }

        if (hex.StartsWith("0x"))
        {
            hex = hex.Substring(2);
        }

        int length = hex.Length;
        byte[] bytes = new byte[length / 2];
        for (int i = 0; i < length; i += 2)
        {
            bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
        }
        return bytes;
    }

    // Example usage in Unity
    async void Start()
    {
        string nodeUrl = "wss://testnet.vara.network";
        string account = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
        string programId = "0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890";


        try
        {

            var pingResponse = await SendPingAsync(nodeUrl, programId);
            Debug.Log($"Ping response: {pingResponse}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"Error: {ex.Message}");
        }
    }
}